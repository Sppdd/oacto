Directory structure:
â””â”€â”€ document-translator/
    â”œâ”€â”€ index.html
    â”œâ”€â”€ script.js
    â””â”€â”€ style.css


Files Content:

================================================
FILE: document-translator/index.html
================================================
<!--
  Copyright 2025 Google LLC
  SPDX-License-Identifier: Apache-2.0
 -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="color-scheme" content="dark light" />
    <!-- Prompt API-->
    <meta http-equiv="origin-trial" content="AoXwZGsUZlGEyuueX5nR6tujynrCfWhNWQnZcHTy3AZkXtCMULt/UJs6+/1Bp5jVw7Ue96Tcyf1IO8IRUMimAgcAAABeeyJvcmlnaW4iOiJodHRwczovL2Nocm9tZS5kZXY6NDQzIiwiZmVhdHVyZSI6IkFJUHJvbXB0QVBJTXVsdGltb2RhbElucHV0IiwiZXhwaXJ5IjoxNzc0MzEwNDAwfQ==">
    <!-- Language Detector API-->
    <meta http-equiv="origin-trial" content="AnxzLAP6z9iLbOv4U+WQD21U3ctD2zgNpIqcbYFo6Uy5degYYju2Ui6lMOQ6qhgxBy/J5FqWl2akz1ThXM4W2w8AAABYeyJvcmlnaW4iOiJodHRwczovL2Nocm9tZS5kZXY6NDQzIiwiZmVhdHVyZSI6Ikxhbmd1YWdlRGV0ZWN0aW9uQVBJIiwiZXhwaXJ5IjoxNzU3OTgwODAwfQ==">
    <!-- Translator API-->
    <meta http-equiv="origin-trial" content="Avcce7kSGU+f/dr8tnMBXmmIPFQLoYbA/i0GdiosVu6tLkdpqivgDQUev3D8lF/vCpN0MPa3O1InUj4SCXUGYwEAAABSeyJvcmlnaW4iOiJodHRwczovL2Nocm9tZS5kZXY6NDQzIiwiZmVhdHVyZSI6IlRyYW5zbGF0aW9uQVBJIiwiZXhwaXJ5IjoxNzU3OTgwODAwfQ==">
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸŽ‰</text></svg>"
    />
    <title></title>
    <link rel="stylesheet" href="style.css" />
    <script>
      if (!isSecureContext) location.protocol = 'https:';
    </script>
    <script src="script.js" type="module"></script>
  </head>
  <body>
    <h1>Document translator</h1>
    <button type="button">Open document</button> <button type=button>Use example</button>
    <img src="" alt="" />
    <h2>Extracted text</h2>
    <output>Extracted text will appear here</output>
    <h2>Detected language</h2>
    <button type="button">Detect document language</button>
    <p class="detected-language">Detected language will appear here</p>
    <h2>Translated text</h2>
    <button type="button">Translate document</button>
    <p class="translation">Translated text will appear here</p>
  </body>
</html>



================================================
FILE: document-translator/script.js
================================================
/**
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

import './pdf.min.mjs';

const {pdfjsLib} = globalThis;
pdfjsLib.GlobalWorkerOptions.workerSrc = './pdf.worker.mjs';

const [openButton, exampleButton, languageButton, translateButton] = Array.from(document.querySelectorAll('button'));
const output = document.querySelector('output');
const detectedLanguageParagraph = document.querySelector('.detected-language');
const translationParagraph = document.querySelector('.translation');
const img = document.querySelector('img');

let useExample = false;
let detectedLanguage = undefined;

openButton.addEventListener('click', async () => {
  output.innerHTML = '';
  translationParagraph.innerHTML = '';
  detectedLanguageParagraph.innerHTML = '';
  detectedLanguage = false;
  img.src = '';

  let file;
  if (!useExample) {
    try {
      const [handle] = await showOpenFilePicker({
        types: [
          {
            description: 'Image or PDF files',
            accept: {
              'image/*': ['.png', '.gif', '.jpeg', '.jpg', '.webp', '.avif'],
              'application/pdf': ['.pdf'],
            },
          },
        ],
      });
      file = await handle.getFile();
      if (file.type === 'application/pdf') {
        const pdfBytes = new Uint8Array(await file.arrayBuffer());
        file = await convertFirstPageToPngBlob(pdfBytes);
      }
    } catch (err) {
      console.error(err.name, err.message);
    }
  } else {
    useExample = false;
    file = await fetch('specimen.png').then(response => response.blob());
  }
  const blobURL = URL.createObjectURL(file);
  img.src = blobURL;
  setTimeout(() => {
    URL.revokeObjectURL(blobURL);
  }, 0);

  try {
    const session = await LanguageModel.create({
      expectedInputs: [{ type: 'image' }, { type: 'text' }],
    });
    const stream = session.promptStreaming([
      {
        role: 'user',
        content: [
          {
            type: 'text',
            value: 'Extract all text from the provided image.',
          },
          { type: 'image', value: file },
        ],
      },
    ]);
    for await (const chunk of stream) {
      output.append(chunk);
    }
  } catch (err) {
    console.error(err.name, err.message);
  }
});

languageButton.addEventListener('click', async () => {
  if (!output.innerText.length) {
    return;
  }

  detectedLanguage = false;
  detectedLanguageParagraph.innerHTML = '';

  try {
    const languageDetector = await LanguageDetector.create();
    ({ detectedLanguage } = (
      await languageDetector.detect(output.innerText)
    )[0]);
    const displayLanguage = new Intl.DisplayNames(['en'], {
      type: 'language',
    }).of(detectedLanguage);
    detectedLanguageParagraph.textContent = displayLanguage;
  } catch (err) {
    console.error(err.name, err.message);
  }
});

translateButton.addEventListener('click', async () => {
  if (!detectedLanguage || detectedLanguage === 'en') {
    return;
  }

  translationParagraph.innerHTML = '';

  try {
    const translator = await Translator.create({
      sourceLanguage: detectedLanguage,
      targetLanguage: 'en',
    });
    const paragraphs = output.innerText.split('\n');
    for (const paragraph of paragraphs) {
      if (!paragraph) {
        translationParagraph.append('\n');
        continue;
      }
      const translateStream = translator.translateStreaming(paragraph);
      for await (const chunk of translateStream) {
        translationParagraph.append(chunk);
      }
      translationParagraph.append('\n');
    }
  } catch (err) {
    console.error(err.name, err.message);
  }
});

exampleButton.addEventListener('click', () => {
  useExample = true;
  openButton.click();
});

const convertFirstPageToPngBlob = async (pdfData) => {
  const loadingTask = pdfjsLib.getDocument({ data: pdfData });
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const scale = 2;
  const viewport = page.getViewport({ scale });
  const canvas = document.createElement('canvas');
  canvas.width = viewport.width;
  canvas.height = viewport.height;
  const context = canvas.getContext('2d');
  await page.render({ canvasContext: context, viewport }).promise;
  return new Promise((resolve) => {
    canvas.toBlob((blob) => {
      resolve(blob);
    }, 'image/png');
  });
};



================================================
FILE: document-translator/style.css
================================================
/**
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

:root {
  color-scheme: dark light;
}

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  font-family: system-ui, sans-serif;
  max-width: clamp(320px, 90%, 1000px);
  margin: auto;
}

h1, h2 {
  color: red;
}

output,
p,
strong {
  display: block;
  white-space: pre-wrap;
}

img {
  display: block;
  margin-block: 1rem;
  max-height: 200px;
  width: auto;
}


