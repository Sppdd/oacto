Directory structure:
â””â”€â”€ prompt-api-playground/
    â”œâ”€â”€ index.html
    â”œâ”€â”€ package.json
    â”œâ”€â”€ script.js
    â””â”€â”€ style.css


Files Content:

================================================
FILE: prompt-api-playground/index.html
================================================
<!--
  Copyright 2024 Google LLC
  SPDX-License-Identifier: Apache-2.0
 -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="color-scheme" content="dark light">
    <meta http-equiv="origin-trial" content="AoXwZGsUZlGEyuueX5nR6tujynrCfWhNWQnZcHTy3AZkXtCMULt/UJs6+/1Bp5jVw7Ue96Tcyf1IO8IRUMimAgcAAABeeyJvcmlnaW4iOiJodHRwczovL2Nocm9tZS5kZXY6NDQzIiwiZmVhdHVyZSI6IkFJUHJvbXB0QVBJTXVsdGltb2RhbElucHV0IiwiZXhwaXJ5IjoxNzc0MzEwNDAwfQ==">
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>âœ¨</text></svg>"
    >
    <link rel="stylesheet" href="style.css">
    <title>Prompt API Playground</title>
    <script>
      if (!isSecureContext) location.protocol = "https:";
    </script>
    <script src="script.js" type="module"></script>
  </head>
  <body>
    <h1>âœ¨ Prompt API Playground</h1>
    <p>
      This is a demo of Chrome's
      <a
        href="https://developer.chrome.com/docs/ai/built-in"
      >built-in Prompt API</a>
      powered by Gemini Nano.
    </p>
    <div id="error-message"></div>
    <div id="prompt-area">
      <form>
        <label>
          Prompt
          <textarea id="prompt-input"></textarea>
        </label>
        <button type="submit" id="submit-button">Submit prompt</button>
        <button type="button" id="reset-button">Reset session</button>
        <span id="cost"></span>
        <div class="settings">
          <label for="session-top-k">Top-k</label>
          <input
            id="session-top-k"
            min="1"
            type="number"
          >
          <label for="session-temperature">Temperature</label>
          <input
            id="session-temperature"
            type="number"
            step="0.1"
            min="0"
          >
        </div>
      </form>
      <h2>Session stats</h2>
      <table>
        <thead>
          <tr>
            <th>Temperature</th>
            <th>Top-k</th>
            <th>Tokens so far</th>
            <th>Tokens left</th>
            <th>Total tokens</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td id="temperature">&nbsp;</td>
            <td id="top-k">&nbsp;</td>
            <td id="tokens-so-far">&nbsp;</td>
            <td id="tokens-left">&nbsp;</td>
            <td id="max-tokens">&nbsp;</td>
          </tr>
        </tbody>
      </table>
      <h2>Conversation</h2>
      <div id="response-area"></div>
      <details>
        <summary>Raw response</summary>
        <div></div>
      </details>
      <button id="copy-link-button">Copy link</button>
      <small
      >ðŸ’¡ If there's a problem with the response, select the problematic text
         with your mouse before clicking the button.</small>
      <div id="problematic-area">
        <h2>Problematic:</h2>
        <pre id="problem"></pre>
      </div>
    </div>
    <footer>
      Made by
      <a href="https://github.com/tomayac/">@tomayac</a>. Source code on
      <a href="https://github.com/GoogleChromeLabs/web-ai-demos">GitHub</a>.
    </footer>
  </body>
</html>


================================================
FILE: prompt-api-playground/package.json
================================================
{
  "name": "prompt-api-playground",
  "version": "1.0.0",
  "description": "This is a demo of Chrome's experimental Prompt API.",
  "scripts": {
    "start": "npx http-server",
    "fix": "prettier --write ."
  },
  "author": "Thomas Steiner (tomac@google.com)",
  "config": {
    "thumbnail": "thumbnail.png"
  },
  "license": "Apache-2.0",
  "devDependencies": {
    "http-server": "^14.1.1",
    "prettier": "^3.3.3"
  }
}



================================================
FILE: prompt-api-playground/script.js
================================================
/**
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

import { marked } from "https://cdn.jsdelivr.net/npm/marked@13.0.3/lib/marked.esm.js";
import DOMPurify from "https://cdn.jsdelivr.net/npm/dompurify@3.1.6/dist/purify.es.mjs";

const NUMBER_FORMAT_LANGUAGE = "en-US";
const SYSTEM_PROMPT = "You are a helpful and friendly assistant.";

(async () => {
  const errorMessage = document.getElementById("error-message");
  const costSpan = document.getElementById("cost");
  const promptArea = document.getElementById("prompt-area");
  const problematicArea = document.getElementById("problematic-area");
  const promptInput = document.getElementById("prompt-input");
  const responseArea = document.getElementById("response-area");
  const copyLinkButton = document.getElementById("copy-link-button");
  const resetButton = document.getElementById("reset-button");
  const copyHelper = document.querySelector("small");
  const rawResponse = document.querySelector("details div");
  const form = document.querySelector("form");
  const maxTokensInfo = document.getElementById("max-tokens");
  const temperatureInfo = document.getElementById("temperature");
  const tokensLeftInfo = document.getElementById("tokens-left");
  const tokensSoFarInfo = document.getElementById("tokens-so-far");
  const topKInfo = document.getElementById("top-k");
  const sessionTemperature = document.getElementById("session-temperature");
  const sessionTopK = document.getElementById("session-top-k");

  responseArea.style.display = "none";

  let session = null;

  if (!('LanguageModel' in self)) {
    errorMessage.style.display = "block";
    errorMessage.innerHTML = `Your browser doesn't support the Prompt API. If you're on Chrome, join the <a href="https://goo.gle/chrome-ai-dev-preview-join">Early Preview Program</a> to enable it.`;
    return;
  }

  promptArea.style.display = "block";
  copyLinkButton.style.display = "none";
  copyHelper.style.display = "none";

  const promptModel = async (highlight = false) => {
    copyLinkButton.style.display = "none";
    copyHelper.style.display = "none";
    problematicArea.style.display = "none";
    const prompt = promptInput.value.trim();
    if (!prompt) return;
    responseArea.style.display = "block";
    const heading = document.createElement("h3");
    heading.classList.add("prompt", "speech-bubble");
    heading.textContent = prompt;
    responseArea.append(heading);
    const p = document.createElement("p");
    p.classList.add("response", "speech-bubble");
    p.textContent = "Generating response...";
    responseArea.append(p);

    try {
      if (!session) {
        await updateSession();
        updateStats();
      }
      const stream = await session.promptStreaming(prompt);

      let result = '';
      let previousChunk = '';
      for await (const chunk of stream) {
        const newChunk = chunk.startsWith(previousChunk)
            ? chunk.slice(previousChunk.length) : chunk;
        result += newChunk;
        p.innerHTML = DOMPurify.sanitize(marked.parse(result));
        rawResponse.innerText = result;
        previousChunk = chunk;
      }
    } catch (error) {
      p.textContent = `Error: ${error.message}`;
    } finally {
      if (highlight) {
        problematicArea.style.display = "block";
        problematicArea.querySelector("#problem").innerText =
          decodeURIComponent(highlight).trim();
      }
      copyLinkButton.style.display = "inline-block";
      copyHelper.style.display = "inline";
      updateStats();
    }
  };

  const updateStats = () => {
    if (!session) {
      return;
    }

    const numberFormat = new Intl.NumberFormat(NUMBER_FORMAT_LANGUAGE);
    const decimalNumberFormat = new Intl.NumberFormat(
      NUMBER_FORMAT_LANGUAGE,
      { minimumFractionDigits: 1, maximumFractionDigits: 1 },
    );

    temperatureInfo.textContent = decimalNumberFormat.format(session.temperature);
    topKInfo.textContent = numberFormat.format(session.topK);

    // In the new API shape, currently in Chrome Canary, `session.maxTokens` was renamed to
    // `session.inputQuota` and `session.tokensSoFar` was renamed to `session.inputUsage`.
    // `session.tokensSoFar` was removed, but the value can be calculated by subtracting
    // `inputUsage` from `inputQuota`. Both APIs shapes are checked in the code below.
    maxTokensInfo.textContent = numberFormat.format(session.inputQuota || session.maxTokens);
    tokensLeftInfo.textContent =
        numberFormat.format(session.tokensSoFar || session.inputQuota - session.inputUsage);
    tokensSoFarInfo.textContent = numberFormat.format(session.inputUsage || session.tokensSoFar);
  };

  const params = new URLSearchParams(location.search);
  const urlPrompt = params.get("prompt");
  const highlight = params.get("highlight");
  if (urlPrompt) {
    promptInput.value = decodeURIComponent(urlPrompt).trim();
    await promptModel(highlight);
  }

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    await promptModel();
  });

  promptInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      form.dispatchEvent(new Event("submit"));
    }
  });

  promptInput.addEventListener("focus", () => {
    promptInput.select();
  });

  promptInput.addEventListener("input", async () => {
    const value = promptInput.value.trim();
    if (!value) {
      return;
    }

    let cost;

    // The API that returns the token count for a prompt changed between Chrome Stable and Canary
    // and the method was renamed from `countPromptTokens(input)` to `measureInputUsage(input)`.
    // The code below ensures both cases are handled.
    if (session.countPromptTokens) {
      cost = await session.countPromptTokens(value);
    } else if (session.measureInputUsage) {
      cost = await session.measureInputUsage(value);
    }

    if (!cost) {
      return;
    }
    costSpan.textContent = `${cost} token${cost === 1 ? '' : 's'}`;
  });

  const resetUI = () => {
    responseArea.style.display = "none";
    responseArea.innerHTML = "";
    rawResponse.innerHTML = "";
    problematicArea.style.display = "none";
    copyLinkButton.style.display = "none";
    copyHelper.style.display = "none";
    maxTokensInfo.textContent = "";
    temperatureInfo.textContent = "";
    tokensLeftInfo.textContent = "";
    tokensSoFarInfo.textContent = "";
    topKInfo.textContent = "";
    promptInput.focus();
  };

  resetButton.addEventListener("click", () => {
    promptInput.value = "";
    resetUI();
    session.destroy();
    session = null;
    updateSession();
  });

  copyLinkButton.addEventListener("click", () => {
    const prompt = promptInput.value.trim();
    if (!prompt) return;
    const url = new URL(self.location.href);
    url.searchParams.set("prompt", encodeURIComponent(prompt));
    const selection = getSelection().toString() || "";
    if (selection) {
      url.searchParams.set("highlight", encodeURIComponent(selection));
    } else {
      url.searchParams.delete("highlight");
    }
    navigator.clipboard.writeText(url.toString()).catch((err) => {
      alert("Failed to copy link: ", err);
    });
    const text = copyLinkButton.textContent;
    copyLinkButton.textContent = "Copied";
    setTimeout(() => {
      copyLinkButton.textContent = text;
    }, 3000);
  });

  const updateSession = async () => {
    if (self.LanguageModel) {
      session = await LanguageModel.create({
        temperature: Number(sessionTemperature.value),
        topK: Number(sessionTopK.value),
        initialPrompts: [
          {
            role: 'system',
            content: SYSTEM_PROMPT,
          }
        ],
      });
    }
    resetUI();
    updateStats();
  };

  sessionTemperature.addEventListener("input", async () => {
    await updateSession();
  });

  sessionTopK.addEventListener("input", async () => {
    await updateSession();
  });

  if (!session) {
    let { defaultTopK, maxTopK, defaultTemperature, maxTemperature } = "LanguageModel" in self ?
      await LanguageModel.params() : {defaultTopK: 3, maxTopK: 128, defaultTemperature: 1, maxTemperature: 2};
    defaultTopK ||= 3;  // https://crbug.com/441711146
    sessionTemperature.value = defaultTemperature;
    sessionTemperature.max = maxTemperature;
    sessionTopK.value = defaultTopK;
    sessionTopK.max = maxTopK;
    await updateSession();
  }
})();



================================================
FILE: prompt-api-playground/style.css
================================================
/**
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

:root {
  color-scheme: dark light;
}

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  font-family: system-ui, sans-serif;
  max-width: clamp(320px, 90%, 1000px);
  margin: auto;
}

h2,
h3 {
  margin-block-end: 0;
}

#error-message,
#problem {
  border: red solid 2px;
  padding: 0.25rem;
}

#prompt-area {
  margin-block-end: 1rem;
}

#prompt-area,
#error-message,
#problematic-area {
  display: none;
}

.prompt,
.response {
  font-size: 1rem;
  font-weight: normal;
  padding: 1.5rem;
}

.response {
  background: #f4b400;
  color: black;
}

.prompt {
  background: #4285f4;
}

.speech-bubble {
  position: relative;
  border-radius: 0.4em;
}

.speech-bubble:after {
  content: "";
  position: absolute;
  top: 50%;
  width: 0;
  height: 0;
  border: 24px solid transparent;
  margin-top: -24px;
}

.response.speech-bubble:after {
  right: 0;
  border-left-color: #f4b400;
  border-right: 0;
  margin-right: -24px;
}

.prompt.speech-bubble:after {
  left: 0;
  border-right-color: #4285f4;
  border-left: 0;
  margin-left: -24px;
}

textarea {
  width: 100%;
  height: 6rem;
}

#response-area {
  white-space: pre-wrap;
  padding: 1rem;
  margin-top: 1rem;
}

details {
  padding-block: 1rem;
}

details div {
  padding: 1rem;
}

.settings {
  width: min-content;
  gap: 1rem;
  margin: 1rem;
  display: grid;
  grid-template-columns: 2fr 1fr;
}

label {
  margin-bottom: 0.3em;
  font-weight: bold;
}

summary {
  cursor: pointer;
  padding: 5px 10px;
  background-color: gray;
  color: white;
  border: none;
  border-radius: 5px;
  min-width: 130px;
  width: min-content;
}

th,
td {
  padding: 0.5rem;
}

td {
  text-align: right;
}

button {
  margin-top: 10px;
  cursor: pointer;
  padding: 5px 10px;
  color: white;
  border: none;
  border-radius: 5px;
  min-width: 130px;
}

[type="submit"] {
  background-color: #0f9d58;
}

#reset-button {
  background-color: #db4437;
}

footer {
  margin-block: 1rem;
}

table {
  font-variant-numeric: tabular-nums;
}


